---
title: "Scratch"
format: revealjs
---

# Base Python Primer

<!-- - Assignment (`=`)
- Data types: (`str`, `int`, `bool`, `float`)
- Data structures: (`list`, `dict`)
	- Accessing elements of structures
- Iteration: `for`
- Functions
- Classes?
 -->

## Preview

- Data types: (`str`, `int`, `bool`, `float`)
- Data structures: (`list`, `dict`)
- Control flow: Iteration: `for`
- Functions


## Values

- Let's begin with the number `42`.
- We can create the value by just writing `42`:

```{python}
42
```

## Variables

- _Variables_ are pointers to _values_.
- We assign _values_ to _variables_ using the `=` operator.

. . . 

```{python}
answer = 42
```


## `print()`

- By default, Jupyter and other interactive applications return the last value.
- To display a value to `stdout`, we can use the `print` function:
- Python functions use `()` to wrap arguments.

```{python}
#| code-line-numbers: "2|3"
answer = 42
print(42)
print(answer)
```


## Types

- Values have types
- We can display the type of a variable using `type()`

. . .

```{python}
type(42)
```


## Python Data Types

Here are four data types in base Python:

- String `str`: character sequences
- Boolean `bool`: true/false values
- Integer `int`: whole numbers
- Float `float`: rational numbers

## String

- Strings are created by writing a sequence of letters between _single **or** double_ quotes.

. . .

```{python}
first_word = "Hello"
second_word = "World"
first_punct = "!"
```

## Equivalence

We can test equivalence using the `==` operator.

. . .

```{python}
#| output-location: column-fragment
first_word == first_word
```

. . .

```{python}
#| output-location: column-fragment
answer == answer
```


## Why Data Types?

- Types determine the operations we can perform

. . .

```{python}

```