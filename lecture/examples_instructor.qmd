---
title: 'Namespaces, Input/Output'
jupyter: dev
---


- When you start a python session, your computer creates a blank canvas that can be populated with python objects.
- Commands, written in these cells, are inputs.
- These commands can create and modify objects that persist in the memory.
- We use the `print()` function to display these objects in the output.


# First Command: "Hello World!"

Write the following command into the first cell:

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
print("Hello World!")
```

# Variable Assignment

- Variables are names that point to particular objects on the canvas. These objects can be values, functions, etc.
- We assign variables with the `=` operator.

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
x = 1
y = 2
print(x)
print(y)
```

There are some rules for variable assignment:

- Variable names cannot contain spaces
- The first letter of the variable cannot be a number or symbol

Both of these will return `SyntaxError`, because the interpreter cannot understand these commands.

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
a variable = "this will give an error"
```

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
1st_variable = "this will also give an error"
```

# Data Types

I introduce the four basic data types:

- Strings
- Integers
- Floats
- Booleans

# Working with strings

There are four basic datatypes in base Python.

We began by looking at strings (`str`), which are a _sequence of characters_.

Strings are created by writing a sequence of letters between _single **or** double_ quotes.

_**Task:**_

Assign the following strings to the following variables.

`first_word`, `"Hello"` <br>
`second_word`, `"World"` <br>
`first_punct`, `"!"` <br>

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
first_word = "Hello"
second_word = "World"
first_punct = "!"
```

We can test equivalence using the `==` operator.

_**Task:**_

Test whether the following are equal:

- `first_word` and `first_word`
- `first_word` and `second_word`

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
first_word == first_word
```

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
first_word == second_word
```

We can combine _strings_ with the `+` operator.

_**Task:**_

Using `first_word`, `second_word`, `first_punct`, the `+` operator, and anything else you may need, create a new variable called `first_sentence` and print it.

```{python}
#| editable: true
#| slideshow: {slide_type: subslide}
#| tags: []
print(first_word+second_word+first_punct)
```

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
# Try it out!
first_sentence =
```

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
first_sentence == "Hello World!"
```

Strings can be indexed by using the `[]` operator _after_ the string.

Note that python counts from zero!

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
the_word = "bird"

print(the_word+" is the word")
print(the_word[0]+" is the first letter of the word")
print(the_word[1]+" is the second letter of the word")
```

Use the `:` to return a range of values. The range `[m:n]` returns from the (m+1)th letter to the nth letter.

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
print(the_word[0:2]+" is the first two letters of the word")
print(the_word[1:3]+" is the second and third letter of the word")
```

```{python}
#| editable: true
#| slideshow: {slide_type: ''}
#| tags: []
# Try it out!
the_word[_:_] == 'ird'
```

*Useful tip*: `[-1]` returns the last element of a sequence; in this case, the last character in a word.

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
print(the_word[-1])
```

# Integers

The second basic data type is _integer_ (`int`).

Integers are whole numbers, positive or negative, and we have already used them for indexing.

## Working with integers

- Integers can be assigned to variables in the same way, with the `=` operator.
- Other basic binary operators are as expected: `+`, `-`, `*`, `/`
- `==` still tests equivalence.

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
a = 5
b = 13
print("a is", a)
print("b is", b)
print("a + b is", a+b)
print("a - b is", a-b)
print("a * b is", a*b)
print("a is equal to b:", a == b)
```

**_Task_**:

Assign the integers 2, 3 and 7 to the variables `a`, `b` and `c`.

_Challenge:_ See if you can get the number 135 from some combination of these variables, using each variable twice, i.e. `a?a?b?b?c?c = 135`

```{python}
#| editable: true
#| slideshow: {slide_type: skip}
#| tags: []
a = 2
b = 3
c = 7
print(a+a*b*b*c+c)
```

# Floats

Floats are, technically, the representation of real numbers ($\mathbb{R}$) in base 2.

For our purposes, all non-whole numbers are represented by floats.

Floats can be constructed using the `.` in a number:

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
x = 1.0
y = 3.4
print(x, "and", y, "are floats")
```

Python also automatically converts the output of integer division to a float:

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
print(1/3)
print(3)
print(3/1)
```

## Warning!!

Floats can behave unpredictably. Note the following examples:

```{python}
#| editable: true
#| slideshow: {slide_type: subslide}
#| tags: []
10*0.1*3 == 3
```

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
0.1*3*10 == 3
```

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
0.1*3 == 0.3
```

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
0.1*3
```

# Booleans

Booleans are True/False values; you will have noticed that we have already come across these.

There are two Booleans: `True` and `False`.


## Boolean Operators

- `and`
- `or`

```{python}
#| editable: true
#| slideshow: {slide_type: subslide}
#| tags: []
True and True
```

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
False or True
```

Also: Booleans act like the integers 0 and 1.

```{python}
#| editable: true
#| slideshow: {slide_type: subslide}
#| tags: []
True+True
```

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
True*False
```

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
False/False
```

# Extra: Checking and Converting Types

- The type of an object can be detected by using the `type` function.
- The type of an object can be coerced by calling the a different type on the object.

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
print(type(15))
print(type(float(15)))
```

**_Task:_**

- _Create two variables, `a` and `b`._
- _Assign an integer to `a` and a float to `b`._
- _Use the `print()` and `type()` functions to check the types of `a` and `b`._

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
a = 3
print(type(a))

b = 0.439
print(type(b))
```

**_Task_**:

- Create an integer variable `i`.
- Use the `float()` function with `i` to create a float variable, `f`.
- Use the `str()` function with `i` to create a string variable, `s`.
- For each of the variables `i`, `f` and `s`, print the variable, its type, and the result of the variable plus itself.

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
i = 5423
f = float(i)
s = str(i)

print(i, type(i), i+i)
print(f, type(f), f+f)
print(s, type(s), s+s)
```

# Data Structures:

I introduce two base data containers:

- Lists
- Dictionaries

# Lists

Lists are a type of data container in base Python. Lists are:

- 1-dimensional
- Ordered and indexed
- Mutable
- Able to contain any (type of) object

To create a list, write a sequence of values separated by commas between square brackets:

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
my_list = [1, 2, 3]  # Contains only integers.
my_list = [1, 2.0, '3']  # Contains integer, float and string
```

## Indexing and Slicing Lists

- Lists can be indexed in the same way as strings, using the `list[m:n]` notation.
    - `list[0]` returns the first value of the list
    - `list[0:3]` returns a slice of the first, second and third value of the list

**_Task_**:

- Create a list of strings containing three letters (easiest if you name it `x`).
- Using list indexing and slicing with string addition (concatenation), write a sentence using only those letters and spaces. Spaces are free.

```{python}
#| editable: true
#| slideshow: {slide_type: subslide}
#| tags: []
x = ['a', 't', 'e']
```

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
# Eat tea!

print(x[2]+x[0]+x[1]+" "+x[1]+x[2]+x[0])
```

## Changing Values in Lists

We can assign or reassign values using `=` and indexers:

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
x[0] = 'A'
x[1] = 'T'

print(x[2]+x[0]+x[1]+" "+x[1]+x[2]+x[0])
```

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
x[0:2] = ['a', 't']

print(x[2]+x[0]+x[1]+" "+x[1]+x[2]+x[0])
```

# Dictionaries

- Dictionaries are an unordered mapping of _keys_ to _values_. 
- Created by writing a list of `key:value` pairs separated by commas between `{}`.

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
favourite_icecream = {
    "Musashi": "chocolate",
    "Marco": "dulce de leche"
}
```

- Values are accessed with `dict_name[key]`

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
print(favourite_icecream['Musashi'])
print(favourite_icecream['Marco'])
```

- New key-value pairs can be added or modified with `=`

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
favourite_icecream['Raquel'] = 'pistachio'
favourite_icecream['Musashi'] = 'green tea'

print(favourite_icecream['Musashi'])
print(favourite_icecream['Raquel'])
```

## Accessing All Keys or Values

To view all of the keys or values in a dictionary, you can use the following _methods_:

- `dict_name.keys()`
- `dict_name.values()`

IMPORTANT: Dictionaries are **not** ordered, meaning the sequence of keys and values may not be in the same order.

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
print(favourite_icecream.keys())
print(favourite_icecream.values())
```

**_Task_**:

- Type your favourite food into the chat, then create a dictionary with five entries based on people and their favourite foods.

# Control Flow

- Control flow structures are specific structures we can put in our code to dictate the order in which code is executed, or whether it is executed at all.
- Today we learn about for-loops, which allow us to repeat a section of code while varying elements systematically.

# For Loops

- A for-loop is a logical structure composed of two parts: an iterable and an action.
- They can be thought of as _for each element of x, do **a**._
- In python, they are written as follows:

```
for i in iterable:
    do x
```

- The four spaces (i.e., a tab) are necessary.

```{python}
#| editable: true
#| slideshow: {slide_type: subslide}
#| tags: []
for number in [1, 2, 3, 4, 5, 6, 7]:
    print(number, "+", number, "=", number+number)
```

```{python}
#| editable: true
#| slideshow: {slide_type: fragment}
#| tags: []
for person in favourite_icecream.keys():
    print(person+"'s favourite flavour of ice cream is " +
          favourite_icecream[person]+".")
```

```{python}
#| editable: true
#| slideshow: {slide_type: subslide}
#| tags: []
**_Task_**:

- Using the dictionary you created in the previous section, use a for loop:
    - Iterating over the people
    - Printing "**PERSON**'s favourite food is **FOOD**"
```

